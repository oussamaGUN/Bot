version: "3.8"
services:
  api-gateway:
    container_name: api-gateway-service
    build:
      context: backend/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - app-network
  auth:
    container_name: auth-service
    build:
      context: backend/auth-service
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - postgres
      - kafka
    networks:
      - app-network
  chat:
    container_name: chat-service
    build:
      context: backend/chat-service
      dockerfile: Dockerfile
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "8082:8080"
    depends_on:
      - auth
      - postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    #   cassandra:
    #     condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # cassandra:
  #   image: cassandra:latest
  #   ports:
  #     - "9042:9042"
  #   environment:
  #     CASSANDRA_CLUSTER_NAME: "MyCluster"
  #     CASSANDRA_DC: "datacenter1"
  #     CASSANDRA_RACK: "rack1"
  #     CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
  #   networks:
  #     - app-network
  #   volumes:
  #     - cassandra-data:/var/lib/cassandra
  #   healthcheck:
  #     test: [ "CMD", "cqlsh", "-e", "describe keyspaces" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  front:
    container_name: front-end
    build:
      context: frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # prevent node_modules from being overwritten
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network
  # ollama:
  #   container_name: ollama-service
  #   image: ollama/ollama:latest
  #   # entrypoint: bash
  #   # command: 
  #   #   -c "ollama serve && ollama pull tinyllama:1.1b-chat"
  #   ports:
  #     - "11434:11434"
  #   networks:
  #     - app-network
  profile:
    container_name: profile-service
    build:
      context: backend/profile-service
      dockerfile: Dockerfile
    ports:
      - "8083:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    depends_on:
      - postgres
    networks:
      - app-network
  notification:
    container_name: notification-service
    build:
      context: backend/notification-service
      dockerfile: Dockerfile
    ports:
      - "8084:8080"
    depends_on:
      - kafka
      - zookeeper
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z kafka 9092 || exit 1
      interval: 10s
      retries: 10
      start_period: 10s
    networks:
      - app-network

      
networks:
  app-network:
    driver: bridge
# volumes:
#   cassandra-data:
